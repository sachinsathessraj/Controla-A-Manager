import React, { useState, useRef } from 'react';
import { uploadImageToSupabase } from '../database/supabaseStorage';

const PremiumBackgroundImageModule = ({
  data = {},
  onChange,
  onDelete,
  onMoveUp,
  onMoveDown,
  moduleIndex,
  modulesLength,
}) => {
  const [moduleData, setModuleData] = useState({
    subheadline: '',
    headline: '',
    body: '',
    fontColor: '#000000',
    textAlignment: 'left',
    backgroundImage: '',
    mobileBackgroundImage: '',
    ...data
  });

  const [showImageModal, setShowImageModal] = useState(false);
  const [isMobileUpload, setIsMobileUpload] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const [saveMsg, setSaveMsg] = useState('');
  const fileInputRef = useRef(null);

  // Styles object
  const styles = {
    container: {
      border: '1px solid #e2e8f0',
      borderRadius: '8px',
      marginBottom: '16px',
      overflow: 'hidden',
      backgroundColor: 'white'
    },
    header: {
      backgroundColor: '#f8fafc',
      padding: '12px 16px',
      borderBottom: '1px solid #e2e8f0',
      display: 'flex',
      justifyContent: 'space-between',
      alignItems: 'center'
    },
    headerTitle: {
      display: 'flex',
      alignItems: 'center',
      gap: '8px',
      margin: 0,
      fontSize: '14px',
      fontWeight: '600',
      color: '#111827'
    },
    aiBadge: {
      backgroundColor: '#f0f9ff',
      color: '#0369a1',
      fontSize: '12px',
      fontWeight: '500',
      padding: '2px 6px',
      borderRadius: '4px',
      border: '1px solid #bae6fd'
    },
    headerActions: {
      display: 'flex',
      gap: '8px',
      alignItems: 'center'
    },
    actionButton: {
      background: 'none',
      border: 'none',
      color: '#6b7280',
      cursor: 'pointer',
      width: '24px',
      height: '24px',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      borderRadius: '4px',
      '&:hover': {
        backgroundColor: '#f3f4f6'
      }
    },
    content: {
      padding: '16px',
      backgroundColor: 'white'
    },
    inputGroup: {
      marginBottom: '16px'
    },
    label: {
      display: 'block',
      fontSize: '12px',
      fontWeight: '500',
      marginBottom: '4px',
      color: '#4b5563'
    },
    input: {
      width: '100%',
      padding: '8px 12px',
      border: '1px solid #d1d5db',
      borderRadius: '6px',
      fontSize: '14px',
      backgroundColor: 'white',
      '&:focus': {
        outline: 'none',
        borderColor: '#3b82f6',
        boxShadow: '0 0 0 1px #3b82f6'
      }
    },
    textarea: {
      width: '100%',
      padding: '8px 12px',
      border: '1px solid #d1d5db',
      borderRadius: '6px',
      fontSize: '14px',
      minHeight: '100px',
      resize: 'vertical',
      lineHeight: '1.5',
      '&:focus': {
        outline: 'none',
        borderColor: '#3b82f6',
        boxShadow: '0 0 0 1px #3b82f6'
      }
    },
    toolbar: {
      display: 'flex',
      gap: '4px',
      marginBottom: '8px',
      padding: '4px',
      backgroundColor: '#f3f4f6',
      borderRadius: '4px'
    },
    toolbarButton: {
      background: 'none',
      border: 'none',
      borderRadius: '4px',
      padding: '4px 8px',
      cursor: 'pointer',
      fontSize: '14px',
      color: '#4b5563',
      '&:hover': {
        backgroundColor: '#e5e7eb'
      },
      '&.active': {
        backgroundColor: '#d1d5db',
        color: '#111827'
      }
    },
    footer: {
      padding: '16px',
      backgroundColor: 'white',
      borderTop: '1px solid #e5e7eb',
      display: 'flex',
      justifyContent: 'space-between',
      alignItems: 'center'
    },
    colorSwatches: {
      display: 'flex',
      gap: '8px',
      alignItems: 'center'
    },
    colorSwatch: {
      width: '24px',
      height: '24px',
      borderRadius: '4px',
      cursor: 'pointer',
      transition: 'all 0.2s',
      '&:hover': {
        transform: 'scale(1.1)'
      }
    },
    buttonPrimary: {
      backgroundColor: '#0F82E4',
      color: 'white',
      border: 'none',
      borderRadius: '4px',
      padding: '8px 16px',
      fontSize: '14px',
      fontWeight: '500',
      cursor: 'pointer',
      display: 'flex',
      alignItems: 'center',
      gap: '8px',
      '&:hover': {
        backgroundColor: '#0c6bc5'
      }
    },
    modalOverlay: {
      position: 'fixed',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      backgroundColor: 'rgba(0, 0, 0, 0.5)',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      zIndex: 1000
    },
    modalContent: {
      backgroundColor: 'white',
      borderRadius: '8px',
      width: '90%',
      maxWidth: '600px',
      maxHeight: '90vh',
      overflowY: 'auto',
      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'
    },
    modalHeader: {
      padding: '16px',
      borderBottom: '1px solid #e5e7eb',
      display: 'flex',
      justifyContent: 'space-between',
      alignItems: 'center'
    },
    modalTitle: {
      margin: 0,
      fontSize: '18px',
      fontWeight: '600',
      color: '#111827'
    },
    modalBody: {
      padding: '16px'
    },
    uploadArea: {
      border: '2px dashed #d1d5db',
      borderRadius: '8px',
      padding: '32px',
      textAlign: 'center',
      backgroundColor: '#f9fafb',
      cursor: 'pointer',
      transition: 'all 0.2s',
      marginBottom: '16px',
      '&:hover': {
        borderColor: '#3b82f6',
        backgroundColor: '#f0f9ff'
      }
    },
    uploadIcon: {
      fontSize: '48px',
      color: '#9ca3af',
      marginBottom: '16px'
    },
    uploadText: {
      fontSize: '16px',
      color: '#4b5563',
      marginBottom: '8px'
    },
    uploadSubtext: {
      fontSize: '14px',
      color: '#9ca3af',
      marginBottom: '16px'
    },
    fileInput: {
      display: 'none'
    },
    saveMessage: {
      marginTop: '8px',
      fontSize: '14px',
      textAlign: 'center',
      color: '#10b981'
    }
  };

  const handleChange = (field, value) => {
    const updatedData = { ...moduleData, [field]: value };
    setModuleData(updatedData);
    if (onChange) onChange(updatedData);
  };

  const checkImageDimensions = (file, minWidth, minHeight) => {
    return new Promise((resolve) => {
      const img = new Image();
      img.onload = () => {
        resolve({
          width: img.width,
          height: img.height,
          isValid: img.width >= minWidth && img.height >= minHeight
        });
      };
      img.src = URL.createObjectURL(file);
    });
  };

  const handleImageUpload = async (file, isMobile = false) => {
    if (!file) return false;

    // Check file type
    const validImageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
    if (!validImageTypes.includes(file.type)) {
      setSaveMsg('Please select a valid image file (JPEG, PNG, GIF, WebP)');
      return false;
    }

    // Check file size (5MB max)
    const maxSizeMB = 5;
    if (file.size > maxSizeMB * 1024 * 1024) {
      setSaveMsg(`Image size should be less than ${maxSizeMB}MB`);
      return false;
    }

    // Set minimum dimensions based on device type
    const minDims = isMobile 
      ? { width: 600, height: 450, label: 'Mobile' } 
      : { width: 1464, height: 600, label: 'Desktop' };
      
    try {
      const dims = await checkImageDimensions(file, minDims.width, minDims.height);
      if (!dims.isValid) {
        setSaveMsg(`${minDims.label} image too small. Min: ${minDims.width}×${minDims.height}px`);
        return false;
      }
      return true;
    } catch (error) {
      console.error('Error checking dimensions:', error);
      setSaveMsg('Error validating image');
      return false;
    }
  };

  const processAndSetImage = async (file, isMobile = false) => {
    setIsUploading(true);
    setSaveMsg('Uploading...');

    try {
      const fileName = `${isMobile ? 'mobile-' : 'desktop-'}${Date.now()}-${file.name}`;
      const { url, error } = await uploadImageToSupabase(file, fileName, 'premium-backgrounds');
      
      if (error) throw error;
      
      const field = isMobile ? 'mobileBackgroundImage' : 'backgroundImage';
      handleChange(field, url);
      setSaveMsg('Upload successful!');
      
      // Clear the message after 3 seconds
      setTimeout(() => setSaveMsg(''), 3000);
      return true;
    } catch (error) {
      console.error('Upload failed:', error);
      setSaveMsg('Upload failed');
      return false;
    } finally {
      setIsUploading(false);
    }
  };

  const handleFileInput = async (e, isMobile = false) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      const isValid = await handleImageUpload(file, isMobile);
      
      if (isValid) {
        await processAndSetImage(file, isMobile);
      }
      
      // Reset the input to allow selecting the same file again
      e.target.value = '';
    }
  };

  const toggleBold = () => document.execCommand('bold', false, null);
  const toggleItalic = () => document.execCommand('italic', false, null);
  const toggleUnderline = () => document.execCommand('underline', false, null);
  const toggleQuote = () => document.execCommand('formatBlock', false, 'blockquote');
  const toggleList = (ordered = false) => {
    const command = ordered ? 'insertOrderedList' : 'insertUnorderedList';
    document.execCommand(command, false, null);
  };

  return (
    <div style={styles.container}>
      <div style={styles.header}>
        <div style={styles.headerTitle}>
          Premium Background Image with Text
          <span style={styles.aiBadge}>AI Ready</span>
        </div>
        <div style={styles.headerActions}>
          <button 
            style={styles.actionButton} 
            onClick={(e) => {
              e.stopPropagation();
              if (onMoveUp) onMoveUp();
            }}
            disabled={moduleIndex === 0}
          >
            ↑
          </button>
          <button 
            style={styles.actionButton}
            onClick={(e) => {
              e.stopPropagation();
              if (onMoveDown) onMoveDown();
            }}
            disabled={moduleIndex === modulesLength - 1}
          >
            ↓
          </button>
          <button 
            style={styles.actionButton}
            onClick={(e) => {
              e.stopPropagation();
              if (onDelete) onDelete();
            }}
          >
            ×
          </button>
        </div>
      </div>

      <div style={styles.content}>
        <div style={styles.inputGroup}>
          <label style={styles.label}>Sub-headline</label>
          <input
            type="text"
            value={moduleData.subheadline}
            onChange={(e) => handleChange('subheadline', e.target.value)}
            placeholder="Enter subheadline text"
            style={styles.input}
          />
        </div>

        <div style={styles.inputGroup}>
          <label style={styles.label}>Headline</label>
          <input
            type="text"
            value={moduleData.headline}
            onChange={(e) => handleChange('headline', e.target.value)}
            placeholder="Enter headline text"
            style={styles.input}
          />
        </div>

        <div style={styles.inputGroup}>
          <label style={styles.label}>Body text</label>
          <div style={styles.toolbar}>
            <button type="button" style={styles.toolbarButton} onClick={toggleBold} title="Bold">
              <strong>B</strong>
            </button>
            <button type="button" style={styles.toolbarButton} onClick={toggleItalic} title="Italic">
              <em>I</em>
            </button>
            <button type="button" style={styles.toolbarButton} onClick={toggleUnderline} title="Underline">
              <u>U</u>
            </button>
            <div style={{ width: '1px', backgroundColor: '#d1d5db', margin: '0 4px' }} />
            <button type="button" style={styles.toolbarButton} onClick={toggleQuote} title="Quote">
              "
            </button>
            <button type="button" style={styles.toolbarButton} onClick={() => toggleList(false)} title="Bulleted list">
              •
            </button>
            <button type="button" style={styles.toolbarButton} onClick={() => toggleList(true)} title="Numbered list">
              1.
            </button>
          </div>
          <div
            contentEditable
            onInput={(e) => handleChange('body', e.currentTarget.innerHTML)}
            dangerouslySetInnerHTML={{ __html: moduleData.body || '' }}
            style={{
              ...styles.textarea,
              minHeight: '100px',
              outline: 'none',
              padding: '12px',
            }}
            placeholder="Enter body text"
          />
        </div>

        <div style={styles.footer}>
          <div style={styles.colorSwatches}>
            <label style={{ ...styles.label, margin: '0 8px 0 0' }}>Font color:</label>
            {['#000000', '#FFFFFF', '#4B5563'].map((color) => (
              <div
                key={color}
                title={color === '#000000' ? 'Black' : color === '#FFFFFF' ? 'White' : 'Gray'}
                style={{
                  ...styles.colorSwatch,
                  backgroundColor: color,
                  border: `2px solid ${moduleData.fontColor === color ? '#3b82f6' : 'transparent'}`,
                }}
                onClick={() => handleChange('fontColor', color)}
              />
            ))}
          </div>

          <button
            onClick={() => {
              setIsMobileUpload(false);
              setShowImageModal(true);
            }}
            style={styles.buttonPrimary}
          >
            + Add Background Image
          </button>
        </div>
      </div>

      {showImageModal && (
        <div style={styles.modalOverlay} onClick={() => setShowImageModal(false)}>
          <div style={styles.modalContent} onClick={e => e.stopPropagation()}>
            <div style={styles.modalHeader}>
              <h3 style={styles.modalTitle}>
                {isMobileUpload ? 'Mobile Background Image' : 'Desktop Background Image'}
              </h3>
              <button style={styles.actionButton} onClick={() => setShowImageModal(false)}>
                ×
              </button>
            </div>
            
            <div style={styles.modalBody}>
              <div 
                style={styles.uploadArea}
                onClick={() => fileInputRef.current?.click()}
              >
                <div style={styles.uploadIcon}>📁</div>
                <div style={styles.uploadText}>
                  Drag & drop your image here, or click to browse
                </div>
                <div style={styles.uploadSubtext}>
                  {isMobileUpload 
                    ? 'Minimum dimensions: 600 × 450px (Recommended: 1200 × 900px)'
                    : 'Minimum dimensions: 1464 × 600px (Recommended: 2928 × 1200px)'}
                </div>
                <input
                  type="file"
                  ref={fileInputRef}
                  style={styles.fileInput}
                  accept="image/*"
                  onChange={(e) => handleFileInput(e, isMobileUpload)}
                />
              </div>

              {saveMsg && (
                <div style={{
                  ...styles.saveMessage,
                  color: saveMsg.includes('success') ? '#10b981' : '#ef4444'
                }}>
                  {saveMsg}
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

  // State management
  const [isExpanded, setIsExpanded] = useState(true);
  const [showImageModal, setShowImageModal] = useState(false);
  const [dragActive, setDragActive] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
{{ ... }}
  const [saveMsg, setSaveMsg] = useState('');
  const [currentImageUrl, setCurrentImageUrl] = useState(data?.backgroundImage || '');
  const fileInputRef = useRef(null);

  // Initialize with default data if not provided
  const [moduleData, setModuleData] = useState(() => ({
    subheadline: data?.subheadline || '',
    headline: data?.headline || '',
    body: data?.body || '',
    fontColor: data?.fontColor || '#FFFFFF',
    textAlignment: data?.textAlignment || 'left',
    backgroundImage: data?.backgroundImage || '',
  }));

  // Debug: Log background image changes
  useEffect(() => {
    console.log('Background image state:', {
      url: moduleData.backgroundImage,
      type: typeof moduleData.backgroundImage,
      valid: !!moduleData.backgroundImage
    });
    
    // Also log the current data prop to see if it's being passed correctly
    console.log('Current data prop:', {
      backgroundImage: data?.backgroundImage,
      type: typeof data?.backgroundImage
    });
  }, [moduleData.backgroundImage, data?.backgroundImage]);

  // Update local state when data prop changes
  useEffect(() => {
    setModuleData(prevData => ({
      ...prevData,
      subheadline: data?.subheadline !== undefined ? data.subheadline : prevData.subheadline,
      headline: data?.headline !== undefined ? data.headline : prevData.headline,
      body: data?.body !== undefined ? data.body : prevData.body,
      fontColor: data?.fontColor !== undefined ? data.fontColor : prevData.fontColor,
      textAlignment: data?.textAlignment !== undefined ? data.textAlignment : prevData.textAlignment,
      backgroundImage: data?.backgroundImage !== undefined ? data.backgroundImage : prevData.backgroundImage,
    }));
  }, [data]);

  // Handle field changes
  const handleChange = useCallback((field, value) => {
    console.log(`Updating ${field}:`, value);
    
    setModuleData(prevData => {
      const updatedData = { ...prevData, [field]: value };
      console.log('State after update:', updatedData);
      
      // Call onChange with the updated data
      if (onChange) {
        console.log('Calling onChange with new data');
        // Create a new object to ensure referential equality works correctly
        const newData = { ...updatedData };
        // Use setTimeout to ensure state is updated before calling onChange
        setTimeout(() => onChange(newData), 0);
      }
      
      return updatedData;
    });
  }, [onChange]);

  // Function to check image dimensions
  const checkImageDimensions = (file, minWidth, minHeight) => {
    return new Promise((resolve) => {
      const img = new Image();
      img.onload = () => {
        const isValid = img.width >= minWidth && img.height >= minHeight;
        resolve({ 
          isValid, 
          width: img.width, 
          height: img.height,
          required: { width: minWidth, height: minHeight }
        });
      };
      img.src = URL.createObjectURL(file);
    });
  };

  // Handle image upload
  const handleImageUpload = async (file, isMobile = false) => {
    if (!file) return;

    // Check file type
    const validImageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
    if (!validImageTypes.includes(file.type)) {
      setSaveMsg('Please select a valid image file (JPEG, PNG, GIF, WebP)');
      return;
    }

    // Check file size (5MB max)
    const maxSizeMB = 5;
    if (file.size > maxSizeMB * 1024 * 1024) {
      setSaveMsg(`Image size should be less than ${maxSizeMB}MB`);
      return;
    }

    // Set minimum dimensions based on device type
    const minDimensions = isMobile 
      ? { width: 600, height: 450, label: 'Mobile' } 
      : { width: 1464, height: 600, label: 'Desktop' };
      
    try {
      const dimensionCheck = await checkImageDimensions(file, minDimensions.width, minDimensions.height);
      if (!dimensionCheck.isValid) {
        setSaveMsg(
          `${minDimensions.label} image too small.\n` +
          `Minimum required: ${minDimensions.width} × ${minDimensions.height}px\n` +
          `Your image: ${dimensionCheck.width} × ${dimensionCheck.height}px`
        );
        return false;
      }
      return true; // Validation passed
    } catch (error) {
      console.error('Error checking image dimensions:', error);
      setSaveMsg('Error validating image dimensions. Please try again.');
      return false;
    }

    setIsUploading(true);
    setSaveMsg('Uploading image...');

    try {
      // Upload to Supabase
      const fileName = `background-${Date.now()}-${file.name}`;
      const { url, error } = await uploadImageToSupabase(file, fileName, 'premium-backgrounds');
      
      if (error) throw error;
      
      // Update with the new image URL
      console.log('Image uploaded successfully. URL:', url);
      handleChange('backgroundImage', url);
      setShowImageModal(false);
      setSaveMsg('Image uploaded successfully!');
      console.log('moduleData after update:', { ...moduleData, backgroundImage: url });
    } catch (error) {
      console.error('Error uploading image:', error);
      setSaveMsg(`Upload failed: ${error.message || 'Unknown error'}`);
    } finally {
      setIsUploading(false);
      // Clear the message after 3 seconds
      setTimeout(() => setSaveMsg(''), 3000);
    }
  };

  // Handle drag events
  const handleDrag = (e) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === 'dragenter' || e.type === 'dragover') {
      setDragActive(true);
    } else if (e.type === 'dragleave') {
      setDragActive(false);
    }
  };

  // Handle file drop
  const handleDrop = async (e, isMobile = false) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      const file = e.dataTransfer.files[0];
      const isValid = await handleImageUpload(file, isMobile);
      
      if (isValid) {
        await processAndSetImage(file, isMobile);
      }
    }
  };

  // Handle file selection via input
  const handleFileInput = async (e, isMobile = false) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      const isValid = await handleImageUpload(file, isMobile);
      
      if (isValid) {
        await processAndSetImage(file, isMobile);
      }
      
      // Reset the input to allow selecting the same file again
      e.target.value = '';
    }
  };
  
  // Process and set the image after validation
  const processAndSetImage = async (file, isMobile = false) => {
    setIsUploading(true);
    setSaveMsg('Uploading image...');

    try {
      // Upload to Supabase
      const fileName = `${isMobile ? 'mobile-' : 'desktop-'}${Date.now()}-${file.name}`;
      const { url, error } = await uploadImageToSupabase(file, fileName, 'premium-backgrounds');
      
      if (error) throw error;
      
      // Update with the new image URL
      console.log('Image uploaded successfully. URL:', url);
      handleChange('backgroundImage', url);
      setSaveMsg('Image uploaded successfully!');
      
      // Only close the modal if this is not a mobile upload
      if (!isMobile) {
        setShowImageModal(false);
      }
      
      // Clear the message after 3 seconds
      setTimeout(() => setSaveMsg(''), 3000);
    } catch (error) {
      console.error('Error uploading image:', error);
      setSaveMsg(`Upload failed: ${error.message || 'Unknown error'}`);
    } finally {
      setIsUploading(false);
    }
  };

  // Render the image upload modal
  const renderImageModal = () => (
    <div style={modalOverlayStyle} onClick={() => setShowImageModal(false)}>
      <div style={modalContentStyle} onClick={e => e.stopPropagation()}>
        <div style={modalHeaderStyle}>
          <h3 style={{ margin: 0, fontSize: '18px', fontWeight: '600', color: '#111827' }}>Add Background Image</h3>
          <button 
            onClick={() => setShowImageModal(false)}
            style={{
              background: 'none',
              border: 'none',
              fontSize: '24px',
              cursor: 'pointer',
              color: '#6B7280',
              padding: '4px',
              lineHeight: '1',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center'
            }}
          >
            &times;
          </button>
        </div>
        
        <div style={modalBodyStyle}>
          <div style={{ marginBottom: '24px' }}>
            <div style={{ display: 'flex', gap: '16px', marginBottom: '16px' }}>
              <div style={{ flex: 1 }}>
                <div style={{ 
                  border: '1px solid #E5E7EB', 
                  borderRadius: '8px',
                  padding: '16px',
                  backgroundColor: '#F9FAFB'
                }}>
                  <div style={{ 
                    border: '1px dashed #D1D5DB', 
                    borderRadius: '6px',
                    padding: '32px 16px',
                    backgroundColor: 'white',
                    textAlign: 'center',
                    cursor: 'pointer',
                    '&:hover': {
                      borderColor: '#9CA3AF'
                    }
                  }}
                  onDragEnter={handleDrag}
                  onDragLeave={handleDrag}
                  onDragOver={handleDrag}
                  onDrop={(e) => handleDrop(e, false)}
                  onClick={() => {
                    fileInputRef.current?.setAttribute('data-type', 'desktop');
                    fileInputRef.current?.click();
                  }}
                  >
                    <div style={{ marginBottom: '12px' }}>
                      <svg width="40" height="40" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M19 13H13V19H11V13H5V11H11V5H13V11H19V13Z" fill="#6B7280" />
                      </svg>
                    </div>
                    <div style={{ fontSize: '14px', color: '#111827', fontWeight: '500', marginBottom: '4px' }}>Upload desktop image</div>
                    <div style={{ fontSize: '12px', color: '#6B7280', marginBottom: '12px' }}>or drag and drop</div>
                    <div style={{ fontSize: '12px', color: '#9CA3AF' }}>JPG, PNG, or GIF (max. 5MB)</div>
                  </div>
                  <div style={{ fontSize: '12px', color: '#6B7280', marginTop: '8px', textAlign: 'center' }}>Min: 1464 x 600px</div>
                </div>
              </div>
              
              <div style={{ flex: 1 }}>
                <div style={{ 
                  border: '1px solid #E5E7EB', 
                  borderRadius: '8px',
                  padding: '16px',
                  backgroundColor: '#F9FAFB'
                }}>
                  <div style={{ 
                    border: '1px dashed #D1D5DB', 
                    borderRadius: '6px',
                    padding: '32px 16px',
                    backgroundColor: 'white',
                    textAlign: 'center',
                    cursor: 'pointer'
                  }}
                  onDragEnter={handleDrag}
                  onDragLeave={handleDrag}
                  onDragOver={handleDrag}
                  onDrop={(e) => handleDrop(e, false)}
                  onClick={() => {
                    fileInputRef.current?.setAttribute('data-type', 'desktop');
                    fileInputRef.current?.click();
                  }}
                  >
                    <div style={{ marginBottom: '12px' }}>
                      <svg width="40" height="40" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M19 13H13V19H11V13H5V11H11V5H13V11H19V13Z" fill="#6B7280" />
                      </svg>
                    </div>
                    <div style={{ fontSize: '14px', color: '#111827', fontWeight: '500', marginBottom: '4px' }}>Upload mobile image</div>
                    <div style={{ fontSize: '12px', color: '#6B7280', marginBottom: '12px' }}>or drag and drop</div>
                    <div style={{ fontSize: '12px', color: '#9CA3AF' }}>JPG, PNG, or GIF (max. 5MB)</div>
                  </div>
                  <div style={{ fontSize: '12px', color: '#6B7280', marginTop: '8px', textAlign: 'center' }}>Min: 600 x 450px</div>
                </div>
              </div>
            </div>
            
            <div style={{ fontSize: '12px', color: '#6B7280', marginTop: '8px' }}>
              The mobile image is optional. If not provided, the desktop image will be used on all devices.
            </div>
          </div>
          
          <div style={{ 
            display: 'flex', 
            justifyContent: 'space-between',
            alignItems: 'center',
            paddingTop: '16px',
            borderTop: '1px solid #E5E7EB',
            marginTop: '16px'
          }}>
            <button 
              onClick={() => setShowImageModal(false)}
              style={{
                ...buttonTertiary,
                color: '#6B7280',
                fontWeight: '500'
              }}
            >
              Cancel
            </button>
            
            <div style={{ display: 'flex', gap: '12px' }}>
              <button 
                onClick={() => {
                  // Handle remove image
                  setCurrentImageUrl('');
                  handleChange('backgroundImage', '');
                  setShowImageModal(false);
                }}
                style={{
                  ...buttonSecondary,
                  borderColor: '#E5E7EB',
                  color: '#6B7280',
                  '&:hover': {
                    backgroundColor: '#F3F4F6'
                  }
                }}
              >
                Remove
              </button>
              
              <button 
                onClick={() => {
                  // The actual upload is handled by the file input's change event
                  fileInputRef.current?.click();
                }}
                style={buttonPrimary}
                disabled={isUploading}
              >
                {isUploading ? 'Uploading...' : 'Add'}
              </button>
            </div>
          </div>
          
          <input
            type="file"
            ref={fileInputRef}
            onChange={(e) => handleFileInput(e, fileInputRef.current?.getAttribute('data-type') === 'mobile')}
            accept="image/*"
            style={{ display: 'none' }}
          />
        </div>
      </div>
    </div>
  );

  // Update local state when data prop changes
  useEffect(() => {
    setModuleData({
      subheadline: data?.subheadline || '',
      headline: data?.headline || '',
      body: data?.body || '',
      fontColor: data?.fontColor || '#FFFFFF',
      textAlignment: data?.textAlignment || 'left',
      backgroundImage: data?.backgroundImage || '',
    });
  }, [data]);

  // No need for this check as we're initializing with default values
  // and the state is guaranteed to be defined

  return (
    <div style={containerStyle}>
      {/* Header */}
      <div 
        style={headerStyle}
        onClick={() => setIsExpanded(!isExpanded)}
      >
        <div style={{ fontWeight: 600, display: 'flex', alignItems: 'center', gap: '8px' }}>
          <span>{isExpanded ? '▼' : '▶'}</span>
          <span>Premium Background Image with Text</span>
        </div>
        <div style={{ display: 'flex', gap: '8px' }}>
          <button 

const toggleList = (ordered = false) => {
  const command = ordered ? 'insertOrderedList' : 'insertUnorderedList';
  document.execCommand(command, false, null);
};
            value={moduleData.subheadline}
            onChange={(e) => handleChange('subheadline', e.target.value)}
            placeholder="Enter subheadline text"
            style={inputStyle}
          />
        </div>

        {/* Headline */}
        <div style={inputGroupStyle}>
          <label style={labelStyle}>Headline</label>
          <input
            type="text"
            value={moduleData.headline}
            onChange={(e) => handleChange('headline', e.target.value)}
            placeholder="Enter headline text"
            style={inputStyle}
          />
        </div>

        {/* Body */}
        <div style={inputGroupStyle}>
          <label style={labelStyle}>Body text</label>
          <div style={toolbarStyle}>
            <button 
              type="button" 
              style={toolbarButtonStyle}
              onClick={toggleBold}
              title="Bold (Ctrl+B)"
            >
              <strong>B</strong>
            </button>
            <button 
              type="button" 
              style={toolbarButtonStyle}
              onClick={toggleItalic}
              title="Italic (Ctrl+I)"
            >
              <em>I</em>
            </button>
            <button 
              type="button" 
              style={toolbarButtonStyle}
              onClick={toggleUnderline}
              title="Underline (Ctrl+U)"
            >
              <u>U</u>
            </button>
            <div style={{ width: '1px', backgroundColor: '#d1d5db', margin: '0 4px' }}></div>
            <button 
              type="button" 
              style={toolbarButtonStyle}
              onClick={toggleQuote}
              title="Quote"
            >
              "
            </button>
            <button 
              type="button" 
              style={toolbarButtonStyle}
              onClick={() => toggleList(false)}
              title="Bulleted list"
            >
              •
            </button>
            <button 
              type="button" 
              style={toolbarButtonStyle}
              onClick={() => toggleList(true)}
              title="Numbered list"
            >
              1.
            </button>
          </div>
          <div
            contentEditable
            onInput={(e) => handleChange('body', e.currentTarget.innerHTML)}
            dangerouslySetInnerHTML={{ __html: moduleData.body || '' }}
            style={{
              ...textareaStyle,
              minHeight: '100px',
              outline: 'none',
              padding: '12px',
              lineHeight: '1.5'
            }}
            placeholder="Enter body text"
          />
        </div>

      </div>

      {/* Footer */}
      <div style={footerStyle}>
        <div style={colorSwatchesStyle}>
          <label style={{ ...labelStyle, margin: '0 8px 0 0' }}>Font color:</label>
          {[
            { color: '#000000', label: 'Black' },
            { color: '#FFFFFF', label: 'White' },
            { color: '#4B5563', label: 'Gray' }
          ].map(({ color, label }) => (
            <div 
              key={color}
              title={label}
              style={colorSwatchStyle(color, moduleData.fontColor === color)}
              onClick={() => handleChange('fontColor', color)}
            />
          ))}
          <div 
            style={{
              ...colorSwatchStyle(moduleData.fontColor, false),
              border: '1px solid #d1d5db',
              backgroundColor: moduleData.fontColor,
              marginLeft: '8px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              color: moduleData.fontColor === '#FFFFFF' ? '#000' : '#fff',
              fontSize: '10px',
              cursor: 'default'
            }}
          >
            A
          </div>
        </div>

        <div>
          <button
            onClick={() => setShowImageModal(true)}
            style={{
              ...buttonPrimary,
              display: 'flex',
              alignItems: 'center',
              gap: '8px',
              padding: '6px 12px',
              fontSize: '14px',
              borderRadius: '6px',
              border: '1px solid #d1d5db',
              backgroundColor: '#f9fafb',
              color: '#1f2937',
              cursor: 'pointer',
              ':hover': {
                backgroundColor: '#f3f4f6'
              }
            }}
          >
            <span>+</span>
            <span>Add background image</span>
          </button>
        </div>
      </div>

          {/* Background Image Button */}
          <div style={{ display: 'flex', justifyContent: 'flex-end' }}>
            <button
              onClick={() => setShowImageModal(true)}
              style={{
                ...addImageButtonStyle,
                width: 'auto',
                backgroundColor: moduleData.backgroundImage ? '#f0f0f0' : '#f8fafc',
                border: moduleData.backgroundImage ? '1px solid #d1d5db' : '1px dashed #cbd5e1',
                display: 'flex',
                alignItems: 'center',
                gap: '8px',
                padding: '8px 16px',
                borderRadius: '4px',
                cursor: 'pointer',
                fontSize: '14px',
                color: '#4b5563',
              }}
            >
              {moduleData.backgroundImage ? 'Change Background Image' : 'Add Background Image'}
              {moduleData.backgroundImage ? '✏️' : '➕'}
            </button>
          </div>

          {/* Preview Section */}
          <div style={{ 
            marginTop: '16px', 
            position: 'relative', 
            minHeight: '400px',
            backgroundColor: moduleData.backgroundImage ? 'transparent' : '#f8fafc', 
            borderRadius: '8px', 
            overflow: 'hidden',
            border: moduleData.backgroundImage ? 'none' : '2px dashed #cbd5e1',
            display: 'flex',
            flexDirection: 'column',
            justifyContent: 'center',
            alignItems: 'center',
            backgroundImage: moduleData.backgroundImage ? `url('${moduleData.backgroundImage}')` : 'none',
            backgroundSize: 'cover',
            backgroundPosition: 'center',
            backgroundRepeat: 'no-repeat',
            transition: 'all 0.3s ease',
            boxShadow: '0 1px 3px rgba(0,0,0,0.1)'
          }}>
            {!moduleData.backgroundImage ? (
              <div style={{ 
                textAlign: 'center', 
                padding: '32px',
                maxWidth: '400px',
                margin: '0 auto'
              }}>
                <div style={{ 
                  fontSize: '16px', 
                  color: '#6b7280', 
                  marginBottom: '12px',
                  fontWeight: '500'
                }}>
                  No background image selected
                </div>
                <div style={{ 
                  fontSize: '14px', 
                  color: '#9ca3af',
                  marginBottom: '20px',
                  lineHeight: '1.5'
                }}>
                  Upload a desktop or mobile background image to see the preview.
                  Minimum dimensions: 1464×600px for desktop, 600×450px for mobile.
                </div>
                <button
                  onClick={() => setShowImageModal(true)}
                  style={{
                    ...buttonPrimary,
                    padding: '10px 20px',
                    fontSize: '14px',
                    display: 'inline-flex',
                    alignItems: 'center',
                    gap: '8px'
                  }}
                >
                  <span>+</span> Add Background Image
                </button>
              </div>
            ) : (
              <div style={{
                position: 'absolute',
                top: '12px',
                right: '12px',
                zIndex: 2
              }}>
                <button
                  onClick={() => setShowImageModal(true)}
                  style={{
                    backgroundColor: 'rgba(0,0,0,0.6)',
                    color: 'white',
                    border: 'none',
                    borderRadius: '4px',
                    padding: '6px 12px',
                    fontSize: '13px',
                    cursor: 'pointer',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '6px',
                    transition: 'all 0.2s',
                    ':hover': {
                      backgroundColor: 'rgba(0,0,0,0.8)'
                    }
                  }}
                >
                  <span>✏️</span> Change Image
                </button>
              </div>
            )}
            
            {/* Text Overlay */}
            <div style={{
              maxWidth: '800px',
              width: '100%',
              padding: '40px',
              color: moduleData.fontColor,
              textAlign: moduleData.textAlignment,
              backgroundColor: moduleData.backgroundImage ? 'rgba(0, 0, 0, 0.3)' : 'transparent',
              borderRadius: '4px',
              margin: '0 auto',
              textShadow: moduleData.backgroundImage ? '0 1px 2px rgba(0,0,0,0.5)' : 'none'
            }}>
              {moduleData.subheadline && (
                <div style={{ 
                  fontSize: '16px', 
                  marginBottom: '8px', 
                  fontWeight: 500,
                  color: moduleData.fontColor,
                  textTransform: 'uppercase',
                  letterSpacing: '1px'
                }}>
                  {moduleData.subheadline}
                </div>
              )}
              {moduleData.headline && (
                <h2 style={{ 
                  fontSize: '32px', 
                  margin: '0 0 16px', 
                  fontWeight: 700,
                  lineHeight: '1.2',
                  color: moduleData.fontColor
                }}>
                  {moduleData.headline}
                </h2>
              )}
              {moduleData.body && (
                <div style={{ 
                  fontSize: '16px', 
                  marginBottom: '24px', 
                  maxWidth: '600px',
                  marginLeft: moduleData.textAlignment === 'center' ? 'auto' : '0', 
                  marginRight: moduleData.textAlignment === 'center' ? 'auto' : '0',
                  lineHeight: '1.6',
                  color: moduleData.fontColor
                }}>
                  {moduleData.body}
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {/* Image Upload Modal */}
      {showImageModal && renderImageModal()}

      {/* Save Message */}
      {saveMsg && (
        <div style={{
          padding: '8px 16px',
          backgroundColor: saveMsg.includes('success') ? '#dcfce7' : '#fee2e2',
          color: saveMsg.includes('success') ? '#166534' : '#991b1b',
          fontSize: '14px',
          borderTop: '1px solid #e2e8f0',
          textAlign: 'center'
        }}>
          {saveMsg}
        </div>
      )}
    </div>
  );
};

export default PremiumBackgroundImageModule;
