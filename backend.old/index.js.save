const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');

const app = express();
app.use(cors());
app.use(express.json());

// MongoDB connection string (local)
const MONGO_URI = 'mongodb://localhost:27017/aplus-content';

mongoose.connect(MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('MongoDB connected'))
  .catch(err => console.error('MongoDB connection error:', err));

// Draft schema
const draftSchema = new mongoose.Schema({
  name: String,
  contentName: String,
  modules: Array,
  date: { type: Date, default: Date.now },
  status: { type: String, default: 'active' }
});
const Draft = mongoose.model('Draft', draftSchema);

// --- API Endpoints ---

// Get all drafts
app.get('/api/drafts', async (req, res) => {
  const drafts = await Draft.find();
  res.json(drafts);
});

// Get a single draft
app.get('/api/drafts/:id', async (req, res) => {
  const draft = await Draft.findById(req.params.id);
  if (!draft) return res.status(404).json({ error: 'Draft not found' });
  res.json(draft);
});

// Create a new draft
app.post('/api/drafts', async (req, res) => {
  const draft = new Draft(req.body);
  await draft.save();
  res.json(draft);
});

// Update a draft
app.put('/api/drafts/:id', async (req, res) => {
  const draft = await Draft.findByIdAndUpdate(req.params.id, req.body, { new: true });
  if (!draft) return res.status(404).json({ error: 'Draft not found' });
  res.json(draft);
});

// Delete a draft
app.delete('/api/drafts/:id', async (req, res) => {
  const draft = await Draft.findByIdAndDelete(req.params.id);
  if (!draft) return res.status(404).json({ error: 'Draft not found' });
  res.json({ message: 'Draft deleted' });
});

const PORT = 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));npm install axios
import React, { useEffect, useState } from 'react';
import axios from 'axios';

function DraftsManager() {
  const [drafts, setDrafts] = useState([]);
  const [loading, setLoading] = useState(true);

  // Load all drafts from backend
  useEffect(() => {
    async function fetchDrafts() {
      try {
        const res = await axios.get('http://localhost:5000/api/drafts');
        setDrafts(res.data);
      } catch (err) {
        console.error('Error fetching drafts:', err);
      } finally {
        setLoading(false);
      }
    }
    fetchDrafts();
  }, []);

  // Save a new draft
  async function saveDraft(draft) {
    try {
      const res = await axios.post('http://localhost:5000/api/drafts', draft);
      setDrafts([...drafts, res.data]);
    } catch (err) {
      console.error('Error saving draft:', err);
    }
  }

  // Update a draft
  async function updateDraft(id, updatedDraft) {
    try {
      const res = await axios.put(`http://localhost:5000/api/drafts/${id}`, updatedDraft);
      setDrafts(drafts.map(d => (d._id === id ? res.data : d)));
    } catch (err) {
      console.error('Error updating draft:', err);
    }
  }

  // Delete a draft
  async function deleteDraft(id) {
    try {
      await axios.delete(`http://localhost:5000/api/drafts/${id}`);
      setDrafts(drafts.filter(d => d._id !== id));
    } catch (err) {
      console.error('Error deleting draft:', err);
    }
  }

  if (loading) return <div>Loading...</div>;

  return (
    <div>
      <h2>Drafts</h2>
      <ul>
        {drafts.map(draft => (
          <li key={draft._id}>
            {draft.name} ({draft.status})
            <button onClick={() => deleteDraft(draft._id)}>Delete</button>
            {/* Add edit/update UI as needed */}
          </li>
        ))}
      </ul>
      {/* Add UI for creating/updating drafts as needed */}
    </div>
  );
}

export default DraftsManager
